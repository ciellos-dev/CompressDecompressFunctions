{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "CompressDecompress",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Y1",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "workerSize": {
      "type": "string",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0",
      "metadata": {
        "description": "The instance size of the hosting plan (small, medium, or large)."
      }
    },
    "key_value": {
      "type": "SecureString",
      "defaultValue": "/BpvF4pggjOMU7NjMPYfpHM8wn9ideRN4YZWZzPvT7lJeTLQhDzzGg==",
      "metadata": {
        "description": "Secure string"
      }
    },
      "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_ZRS",
          "Premium_LRS"
        ],
        "metadata": {
          "description": "Storage Account type"
        }
      },
    "repoURL": {
      "type": "string",
      "defaultValue": "https://github.com/ciellos-dev/CompressDecompressFunctions.git",
      "metadata": {
        "description": "The URL for the GitHub repository that contains the project to deploy."
      }
    },
      "branch": {
        "type": "string",
        "defaultValue": "master",
        "metadata": {
          "description": "The branch of the GitHub repository to use."
        }
      },
      "publisherName": {
        "type": "string",
        "defaultValue": "Ciellos",
        "metadata": {
          "description": "The Publisher name"
        }
      },
      "publisherEmail": {
        "type": "string",
        "defaultValue": "yevgenii.romanov@ciellos.com",
        "metadata": {
          "description": "The Publisher email"
        }
      }
    },
  "variables": {
    "functionAppName": "[parameters('appName')]",
    "functionApimName": "[concat(parameters('appName'), '-apim')]",
    "functionAppKey": "[concat(variables('functionAppName'), '-key')]",
    "hostingPlanName": "[concat(parameters('appName'), '-plan')]",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'functions')]",
    "functionsName": "[concat(variables('functionAppName'), '-functions')]",
    "siteUrl": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/')]",
    "location": "[resourceGroup().location]"
  },
  "resources": [
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2019-12-01",
      "name": "[variables('functionApimName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Consumption",
        "capacity": 0
      },
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
        "hostnameConfigurations": [
          {
            "type": "Proxy",
            "hostName": "[concat(variables('functionApimName'), '.azure-api.net')]",
            "negotiateClientCertificate": false,
            "defaultSslBinding": true
          }
        ],
        "customProperties": {
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "False"
        },
        "virtualNetworkType": "None",
        "apiVersionConstraint": {}
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/compressdecompress-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "displayName": "compressdecompress-key",
        "tags": [
          "key",
          "function",
          "auto"
        ],
        "secret": true,
        "value": "[parameters('key_value')]"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/' , variables('functionAppName'), '-functions')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "displayName": "Compress Decompress functions",
        "apiRevision": "1",
        "description": "Compress Decompress Functions",
        "subscriptionRequired": true,
        "path": "[variables('functionAppName')]",
        "protocols": [
          "https"
        ],
        "isCurrent": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/', variables('functionsName'), '/post-compress')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('functionApimName'), variables('functionsName'))]",
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "displayName": "Compress",
        "method": "POST",
        "urlTemplate": "/Compress",
        "templateParameters": [],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/', variables('functionsName'), '/post-decompress')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('functionApimName'), variables('functionsName'))]",
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "displayName": "Decompress",
        "method": "POST",
        "urlTemplate": "/Decompress",
        "templateParameters": [],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/', variables('functionsName'), '/post-compress/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('functionApimName'), variables('functionsName'), 'post-compress')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('functionApimName'), variables('functionsName'))]",
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "value": "[concat('<policies><inbound><base /><set-backend-service id=\"apim-generated-policy\" backend-id=\"', variables('functionAppName') ,'\" />  </inbound><backend><base /></backend><outbound><base /></outbound><on-error><base /></on-error></policies>')]",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/', variables('functionsName'), '/post-decompress/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('functionApimName'), variables('functionsName'), 'post-decompress')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('functionApimName'), variables('functionsName'))]",
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "value": "[concat('<policies><inbound><base /><set-backend-service id=\"apim-generated-policy\" backend-id=\"', variables('functionAppName') ,'\" />  </inbound><backend><base /></backend><outbound><base /></outbound><on-error><base /></on-error></policies>')]",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/' , variables('functionAppName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "description": "[variables('functionAppName')]",
        "url": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/api')]",
        "protocol": "http",
        "resourceId": "[concat('https://management.azure.com/', resourceId('Microsoft.Web/Sites', variables('functionAppName')))]",
        "credentials": {
          "header": {
            "x-functions-key": [
              "compressdecompress-key"
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('functionApimName'), '/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]"
      ],
      "properties": {
        "value": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound></inbound>\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound></outbound>\r\n</policies>",
        "format": "xml"
      }
    },

    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-11-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "properties": {
        "workerSize": "[parameters('workerSize')]",
        "numberOfWorkers": 1
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('functionAppName'), '/', variables('functionAppName'), '.azurewebsites.net')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/sourcecontrols', variables('functionAppName'), 'web')]"
      ],
      "properties": {
        "siteName": "[variables('functionAppName')]",
        "hostNameType": "Verified"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "name": "[concat(variables('functionAppName'), '/default/compressdecompress-key')]",
      "properties": {
        "name": "compressdecompress-key",
        "value": "[parameters('key_value')]"
      },
      "type": "Microsoft.Web/sites/host/functionKeys"
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[variables('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('functionApimName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "clientAffinityEnabled": false,
        "apiManagementConfig": {
          "id": "[resourceId('Microsoft.ApiManagement/service/apis', variables('functionApimName'), variables('functionsName'))]"
        },
        "siteConfig": {
          "alwaysOn": false,
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3",
              "slotSetting": false
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet",
              "slotSetting": false
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-11-01').keys[0].value,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-11-01').keys[0].value,';')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('repoURL')]",
            "branch": "[parameters('branch')]",
            "IsManualIntegration": true
          }
        }
      ]
    }
  ]
}
